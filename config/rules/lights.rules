rule "Lights items received command"
when
  Member of Light_Proxy_Sync received command
then
  val triggeringItemSplit = triggeringItem.name.split("_")
  var brightness = receivedCommand

  if (brightness == "ON") {
    brightness = 100
  } else if (brightness == "OFF") {
    brightness = 0
  }

  logInfo("Lights", "Received command from " + triggeringItem + ": " + brightness)

  val lightName = triggeringItemSplit.get(0)
  val source = triggeringItemSplit.get(1)

  if (source == "Proxy") {
    return;
  }

  val proxy = Lights.allMembers.findFirst[ p | p.name == lightName + "_Proxy" ]
  val device = Lights.allMembers.findFirst[  p | p.name == lightName + "_Device" ]
  val ui = Lights.allMembers.findFirst[  p | p.name == lightName + "_UI" ]
  val rules = Lights.allMembers.findFirst[  p | p.name == lightName + "_Rules" ]

  logInfo("Lights", "Currently: " + 
    "\nProxy:  " + proxy.state + 
    "\nDevice: " + device.state + 
    "\nUI:     " + ui.state +
    "\nRules:  " + rules.state)

  if (source == "Device") {
    Thread::sleep(50)
    if (brightness == proxy.state) {
      return;
    }
    if (proxy.state == 0 && brightness != 0) {
      brightness = Integer.parseInt(transform("MAP", "time_of_day_to_brightness.map", vTimeOfDay.state.toString()))
      logInfo("Lights", "Setting brightness to " + brightness + " because it is " + vTimeOfDay.state)
    }
    logInfo("Lights", "Got a device command: " + brightness)
  }

  logInfo("Lights", "It was " + source + " for light " + lightName + " to " + brightness)

  if (proxy.state != brightness) proxy.sendCommand(brightness as Number)
  if (device.state != brightness) device.sendCommand(brightness as Number)
  if (ui.state != brightness) ui.sendCommand(brightness as Number)
  if (rules.state != brightness) rules.sendCommand(brightness as Number)
end

rule "Lights_Device deviating from the Lights_Proxy emit a command"
when
  Member of Lights_Device changed
then
  val device = triggeringItem
  val lightName = device.name.split("_").get(0)

  logInfo("Lights", "Light " + lightName + " changed.")
  val proxy = Lights.allMembers.findFirst[ p | p.name == lightName + "_Proxy" ]

  logInfo("Lights", "Device State " + device.state)
  logInfo("Lights", "Lights  State " + proxy.state)

  if (device.state == proxy.state) {
    return;
  }

  logInfo("Lights", "Emitting command for device to set brightness to " + triggeringItem.state)

  triggeringItem.sendCommand(triggeringItem.state as Number)
end

rule "Front Room Lighting Link"
when
	Item FrontRoom_Dual_Light received command
then
	var int set = receivedCommand as DecimalType
	KitchenLight_Rules.sendCommand(set)
	LoungeLight_Rules.sendCommand(set)
end

rule "All Lights"
when
	Item AllLights received command OFF
then
  if (triggeringItem.name == "AllLights") {
    logInfo("Lights", "Turning off all lights via rules")
    AllLights_Rules.members.forEach[Switch L |
      L.sendCommand(0)
    ]
  } else {
    logInfo("Lights", "Not turning off the lights as the AllLights item wasn't touched")
  }
end
